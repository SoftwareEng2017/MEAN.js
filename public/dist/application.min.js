"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("profilepages")}(ApplicationConfiguration),function(app){app.registerModule("schedules")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),ApplicationConfiguration.registerModule("users.employees"),ApplicationConfiguration.registerModule("users.employees.routes"),angular.module("articles").run(["Menus",function(Menus){}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"modules/articles/client/views/list-articles.client.view.html"}).state("articles.create",{url:"/create",templateUrl:"modules/articles/client/views/create-article.client.view.html",data:{roles:["user","admin"]}}).state("articles.view",{url:"/:articleId",templateUrl:"modules/articles/client/views/view-article.client.view.html"}).state("articles.edit",{url:"/:articleId/edit",templateUrl:"modules/articles/client/views/edit-article.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Employee Directory",state:"admin",type:"dropdown",roles:["admin"]}),Menus.addMenuItem("topbar",{title:"Employees",state:"admin",type:"dropdown",roles:["employee"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Profile Page",state:"profilepages.list",roles:["user"]})}angular.module("profilepages").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("profilepages",{"abstract":!0,url:"/profilepages",templateUrl:"<ui-view/>"}).state("profilepages.list",{url:"",templateUrl:"modules/profilepages/client/views/list-profilepages.client.view.html",controller:"ProfilepagesController",controllerAs:"vm",data:{pageTitle:"Profilepages List"}}).state("profilepages.create",{url:"/create",templateUrl:"modules/profilepages/client/views/form-profilepage.client.view.html",controller:"ProfilepagesController",controllerAs:"vm",resolve:{profilepageResolve:newProfilepage},data:{roles:["user","admin"],pageTitle:"Profilepages Create"}}).state("profilepages.edit",{url:"/:profilepageId/edit",templateUrl:"modules/profilepages/client/views/form-profilepage.client.view.html",controller:"ProfilepagesController",controllerAs:"vm",resolve:{profilepageResolve:getProfilepage},data:{roles:["user","admin"],pageTitle:"Edit Profilepage {{ profilepageResolve.name }}"}}).state("profilepages.view",{url:"/:profilepageId",templateUrl:"modules/profilepages/client/views/view-profilepage.client.view.html",controller:"ProfilepagesController",controllerAs:"vm",resolve:{profilepageResolve:getProfilepage},data:{pageTitle:"Profilepage {{ profilepageResolve.name }}"}})}function getProfilepage($stateParams,ProfilepagesService){return ProfilepagesService.get({profilepageId:$stateParams.profilepageId}).$promise}function newProfilepage(ProfilepagesService){return new ProfilepagesService}angular.module("profilepages").config(routeConfig),routeConfig.$inject=["$stateProvider"],getProfilepage.$inject=["$stateParams","ProfilepagesService"],newProfilepage.$inject=["ProfilepagesService"]}(),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.days=["mon","tue","wed","thu","fri","sat","sun"],$scope.shifts=[0,1,2,3],$scope.employeeCredentials={username:"",password:"",availibility:{sun:[0,0,0,0],sat:[0,0,0,0],fri:[0,0,0,0],thu:[0,0,0,0],wed:[0,0,0,0],tue:[0,0,0,0],mon:[0,0,0,0]},email:"",type:"",lastName:"",firstName:""},$scope.authentication.user,$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.employeeCredentials).success(function(response){$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),function(){function ProfilepagesListController(ProfilepagesService){var vm=this;vm.profilepages=ProfilepagesService.query()}angular.module("profilepages").controller("ProfilepagesListController",ProfilepagesListController),ProfilepagesListController.$inject=["ProfilepagesService"]}(),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),function(){function ProfilepagesController($scope,$state,$window,Authentication){var vm=this;vm.authentication=Authentication,vm.profilepage={},vm.error=null,vm.form={},vm.test="string",console.log(vm.authentication.user),$scope.tabTagsInfo=[{url:"modules/profilepages/client/views/userInfo.html",tagName:"Info"},{url:"modules/profilepages/client/views/scheduleView.html",tagName:"Schedule"},{url:"modules/profilepages/client/views/userInfo.html",tagName:"Person"}],$scope.tabIndex=0,$scope.setIndex=function(index){$scope.tabIndex=index}}angular.module("profilepages").controller("ProfilepagesController",ProfilepagesController),ProfilepagesController.$inject=["$scope","$state","$window","Authentication"]}(),function(){function ProfilepagesService($resource){return $resource("api/profilepages/:profilepageId",{profilepageId:"@_id"},{update:{method:"PUT"}})}angular.module("profilepages").factory("ProfilepagesService",ProfilepagesService),ProfilepagesService.$inject=["$resource"]}(),function(){function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Schedules",state:"schedules.list",roles:["user","admin"]})}angular.module("schedules").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("schedules",{"abstract":!0,url:"/schedules",template:"<ui-view/>"}).state("shift",{"abstract":!0,url:"/shift",template:"<ui-view/>"}).state("schedules.list",{url:"",templateUrl:"modules/schedules/client/views/list-schedules.client.view.html",controller:"SchedulesListController",controllerAs:"vm",data:{pageTitle:"Schedules List"}}).state("schedules.create",{url:"/create",templateUrl:"modules/schedules/client/views/form-schedule.client.view.html",controller:"SchedulesController",controllerAs:"vm",resolve:{scheduleResolve:newSchedule},data:{roles:["admin"],pageTitle:"Schedules Create"}}).state("schedules.edit",{url:"/:scheduleId/edit",templateUrl:"modules/schedules/client/views/form-schedule.client.view.html",controller:"SchedulesController",controllerAs:"vm",resolve:{scheduleResolve:getSchedule},data:{roles:["admin"],pageTitle:"Edit Schedule {{ scheduleResolve.name }}"}}).state("shift.edit",{url:"/:scheduleId/:shiftId/:index/edit",templateUrl:"modules/schedules/client/views/form-shift.client.view.html",controller:"SchedulesController",controllerAs:"vm",resolve:{scheduleResolve:getSchedule},data:{roles:["user","admin"],pageTitle:"Edit Shift"}}).state("shift.create",{url:"/:scheduleId/createShift",templateUrl:"modules/schedules/client/views/form-shift.client.view.html",controller:"SchedulesController",controllerAs:"vm",resolve:{scheduleResolve:getSchedule},data:{roles:["user","admin"],pageTitle:"Add Shift"}}).state("shift.addEmployee",{url:"/:scheduleId/:shiftId/:index/addEmployee",templateUrl:"modules/schedules/client/views/form-shift-addEmployee.client.view.html",controller:"SchedulesController",controllerAs:"vm",resolve:{scheduleResolve:getSchedule},data:{roles:["user","admin"],pageTitle:"Add Employee"}}).state("schedules.view",{url:"/:scheduleId",templateUrl:"modules/schedules/client/views/view-schedule.client.view.html",controller:"SchedulesController",controllerAs:"vm",resolve:{scheduleResolve:getSchedule},data:{pageTitle:"Schedule {{ scheduleResolve.name }}"}})}function getSchedule($stateParams,SchedulesService){return SchedulesService.get({scheduleId:$stateParams.scheduleId}).$promise}function newSchedule(SchedulesService){return new SchedulesService}angular.module("schedules").config(routeConfig),routeConfig.$inject=["$stateProvider"],getSchedule.$inject=["$stateParams","SchedulesService"],newSchedule.$inject=["SchedulesService"]}(),function(){function SchedulesListController(SchedulesService,$scope,$http){var vm=this;$scope.nextWeekArray=[],$scope.noWeek=0,$scope.noNextWeek=function(){for(var i=0;i<$scope.nextWeekArray.length;++i)if($scope.nextWeekArray[i]===!0)return $scope.nextWeekArray=[],$scope.noWeek=0,!1;return $scope.nextWeekArray=[],$scope.noWeek=1,!0},$scope.isNextWeek=function(schedule){var date1,d=new Date,today=d.getDay();0===today?date1=new Date(d.setTime(d.getTime()-5184e5)):1===today?date1=new Date(d.setTime(d.getTime())):2===today?date1=new Date(d.setTime(d.getTime()-864e5)):3===today?date1=new Date(d.setTime(d.getTime()-1728e5)):4===today?date1=new Date(d.setTime(d.getTime()-2592e5)):5===today?date1=new Date(d.setTime(d.getTime()-3456e5)):6===today&&(date1=new Date(d.setTime(d.getTime()-432e6))),console.log(date1);var w=new Date(schedule.weekStart);console.log(w);var utcWeekStart=w.getTime(),utcMonday=date1.getTime();return utcWeekStart>utcMonday?!0:6048e5>=utcMonday-utcWeekStart?!1:utcMonday-utcWeekStart>6048e5?!1:!1},$scope.pushNextWeek=function(schedule){return $scope.nextWeekArray.push($scope.isNextWeek(schedule)),!0},$scope.isThisWeek=function(schedule){var date1,d=new Date,today=d.getDay();0===today?date1=new Date(d.setTime(d.getTime()-5184e5)):1===today?date1=new Date(d.setTime(d.getTime())):2===today?date1=new Date(d.setTime(d.getTime()-864e5)):3===today?date1=new Date(d.setTime(d.getTime()-1728e5)):4===today?date1=new Date(d.setTime(d.getTime()-2592e5)):5===today?date1=new Date(d.setTime(d.getTime()-3456e5)):6===today&&(date1=new Date(d.setTime(d.getTime()-432e6))),console.log(date1);var w=new Date(schedule.weekStart);console.log(w);var utcWeekStart=w.getTime(),utcMonday=date1.getTime();return utcWeekStart>utcMonday?!1:6048e5>=utcMonday-utcWeekStart?!0:utcMonday-utcWeekStart>6048e5?!1:!1},$scope.isOtherWeek=function(schedule){var date1,d=new Date,today=d.getDay();0===today?date1=new Date(d.setTime(d.getTime()-5184e5)):1===today?date1=new Date(d.setTime(d.getTime())):2===today?date1=new Date(d.setTime(d.getTime()-864e5)):3===today?date1=new Date(d.setTime(d.getTime()-1728e5)):4===today?date1=new Date(d.setTime(d.getTime()-2592e5)):5===today?date1=new Date(d.setTime(d.getTime()-3456e5)):6===today&&(date1=new Date(d.setTime(d.getTime()-432e6))),console.log(date1);var w=new Date(schedule.weekStart);console.log(w);var utcWeekStart=w.getTime(),utcMonday=date1.getTime();return utcWeekStart>utcMonday?!1:6048e5>=utcMonday-utcWeekStart?!1:utcMonday-utcWeekStart>6048e5?!0:!1},vm.schedules=SchedulesService.query()}angular.module("schedules").controller("SchedulesListController",SchedulesListController),SchedulesListController.$inject=["SchedulesService","$scope","$http"]}(),function(){function SchedulesController($scope,$state,$window,Authentication,schedule,$stateParams,Admin,$http){function hasDuplicates(input,array){for(var i=0;i<array.length;++i){var value=array[i];if(input===value._id)return!0}return!1}function remove(){$window.confirm("Are you sure you want to delete?")&&(vm.schedule.$remove(),window.location.reload(!0,$state.go("schedules.list")))}function save(isValid){function successCallback(res){$state.go("schedules.view",{scheduleId:res._id})}function errorCallback(res){vm.error=res.data.message}var newSchedule={weekName:vm.schedule.weekName,users:$scope.users,requirements:{open:[1,1,1],close:[1,1,1],full:[3,2,1]}};return isValid?void(vm.schedule._id?vm.schedule.$update(successCallback,errorCallback):$http.post("http://localhost:3000/api/schedules",newSchedule).success(successCallback).error(errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.scheduleForm"),!1)}var vm=this;Admin.query(function(data){$scope.users=data}),vm.authentication=Authentication,vm.schedule=schedule,vm.shift=void 0,vm.index=$stateParams.index,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,$scope.areEqual=function(array1,array2){for(var i=0;i<array2.length;i++)if(1===array2[i]&&1===array1[i])return!0;return!1},$scope.setShift=function(index){$stateParams.index=index},$scope.addEmployee=function(shift,employee,day,index){for(var shift_num,employeeName=employee.name,newAssigned=employee.assigned,i=0;3>i;i++)1===shift.role[i]&&(shift_num=3*i);if(!hasDuplicates(employee._id,shift.employees)){for(var j=0;3>j;j++)1===shift.whichShift[j]&&(newAssigned[day][shift_num+j]=1);var newEmployee={name:employeeName,id:employee.id,shift_day:day,shift_role:shift.role,which_shift:shift.whichShift,value:1};shift.employees.push(newEmployee),shift.available.splice(index,1),shift.required=shift.required-1,console.log(newEmployee),$http.post("http://localhost:3000/api/users/updateAssignment",newEmployee).success(function(response){console.log(response.message)}).error(function(response){$scope.error=response.message})}vm.save(!0)},$scope.removeEmployee=function(shift,index,day,employee){for(var shift_num,employeeName=employee.name,newAssigned=employee.assigned,i=0;3>i;i++)1===shift.role[i]&&(shift_num=3*i);for(var j=0;3>j;j++)1===shift.whichShift[j]&&(newAssigned[day][shift_num+j]=0);var newEmployee={name:employeeName,id:employee.id,shift_day:day,shift_role:shift.role,which_shift:shift.whichShift,value:0};console.log(newEmployee),shift.available.push(newEmployee),shift.required=shift.required+1,shift.employees.splice(index,1),$http.post("http://localhost:3000/api/users/updateAssignment",newEmployee).success(function(response){console.log(response.message)}).error(function(response){$scope.error=response.message}),vm.save(!0)}}angular.module("schedules").controller("SchedulesController",SchedulesController),SchedulesController.$inject=["$scope","$state","$window","Authentication","scheduleResolve","$stateParams","Admin","$http"]}(),function(){function SchedulesService($resource){return $resource("api/schedules/:scheduleId",{scheduleId:"@_id"},{update:{method:"PUT"}})}angular.module("schedules").factory("SchedulesService",SchedulesService),SchedulesService.$inject=["$resource"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"List Employees",state:"admin.users"}),Menus.addSubMenuItem("topbar","admin",{title:"Add Employee",state:"authentication.signup"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users.employees").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"EmployeesTest",state:"employees",type:"dropdown",roles:["user"]}),Menus.addSubMenuItem("topbar","employees",{title:"View Employees",state:"employees.users"})}]),angular.module("users.employees.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("employees",{"abstract":!0,url:"/employees",emplate:"<ui-view/>"}).state("employees.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.returnRole=function(roleArray){var Roles="";return 1===roleArray[0]&&(Roles+="Driver "),1===roleArray[1]&&(Roles+="Kitchen "),1===roleArray[2]&&(Roles+="Front "),Roles},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.returnRole=function(roleArray){var Roles="";return 1===roleArray[0]&&(Roles+="Driver "),1===roleArray[1]&&(Roles+="Kitchen "),1===roleArray[2]&&(Roles+="Front "),Roles},$scope.update=function(isValid){
if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){window.location.reload(!0,$state.go("admin.user",{userId:user._id}))},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.previousUser=void 0,$scope.error=$location.search().err,$scope.days=["mon","tue","wed","thu","fri","sat","sun"],$scope.shifts=[0,1,2,3],$scope.employeeCredentials={username:"",password:"",availibility:{sun:[0,0,0,0,0,0,0,0,0],sat:[0,0,0,0,0,0,0,0,0],fri:[0,0,0,0,0,0,0,0,0],thu:[0,0,0,0,0,0,0,0,0],wed:[0,0,0,0,0,0,0,0,0],tue:[0,0,0,0,0,0,0,0,0],mon:[0,0,0,0,0,0,0,0,0]},email:"",type:[0,0,0],lastName:"",firstName:""},$scope.authentication.user,$scope.setType=function(index){$scope.employeeCredentials.type=[0,0,0],$scope.employeeCredentials.type[index]=1},$scope.signup=function(isValid){return $scope.error=null,$scope.previousUser=$scope.authentication.user,isValid?void $http.post("/api/auth/signup",$scope.employeeCredentials).success(function(response){$state.go("home",$state.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication","SchedulesService",function($scope,$http,$location,Users,Authentication,SchedulesService){$scope.user=Authentication.user,$scope.days=["monday","tuesday","wednesday","thursday","friday","saturday","sunday"],$scope.shifts=[1,2,3,4],$scope.schedules=void 0,$scope.mon=[],$scope.compareArray=function(array1,array2){return JSON.stringify(array1)===JSON.stringify(array2)},$scope.returnRole=function(roleArray){return 1===roleArray[0]?"Driver":1===roleArray[1]?"Kitchen":1===roleArray[2]?"Front":void 0},$scope.findShift=function(array1,array2){for(var i=0;i<array1.length;i++)if(1===array1[i])return array1[i]===array2[i]?!0:!1},$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})},$scope.getSchedules=function(){$scope.schedules=SchedulesService.query(),$scope.schedules.$promise.then(function(result){$scope.schedules=result,$scope.mon=$scope.schedules[0].monday})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);